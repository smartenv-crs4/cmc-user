[  {    "type": "",    "url": "Configuration",    "title": "Fields",    "version": "1.0.0",    "name": "Configuration",    "group": "Configuration",    "description": "<p>This section lists the configuration parameters of the microservice</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "dbPort",            "description": "<p>mongoDb Port number</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "dbHost",            "description": "<p>mongoDb Host name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "dbName",            "description": "<p>mongoDb database name</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "limit",            "description": "<p>default limit param used to paginate get response</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "skip",            "description": "<p>default skip param used to paginate get response</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "logfile",            "description": "<p>log file path</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": false,            "field": "SignUpAuthorizedAppAndMS",            "description": "<p>a list of signup authorized App types (defined in AuthMS) e.g. [&quot;webUi&quot;]</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": false,            "field": "SignInAuthorizedAppAndMS",            "description": "<p>a list of login  authorized App types (defined in AuthMS) e.g. [&quot;webUi&quot;]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "microserviceAuthMS",            "description": "<p>BaseUrl of AuthMs microservices</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "MyMicroserviceToken",            "description": "<p>the token for this Application microservice. To get it register this Ms in AuthMs</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": false,            "field": "adminUser",            "description": "<p>a list of admin User types (defined in AuthMS) e.g. [&quot;admin&quot;]</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "AdminDefaultUser",            "description": "<p>Object containing the default admin user</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "UserSchema",            "description": "<p>Object containig the mongoDb Schema of Users. If not set, a schema defined in models/users.js will be used</p>"          }        ]      }    },    "filename": "routes/middlewares.js",    "groupTitle": "Configuration"  },  {    "type": "post",    "url": "/users/:id/actions/changeuserid",    "title": "Change User Id (email)",    "version": "1.0.0",    "name": "ChangeUserId",    "group": "Users",    "description": "<p>Accessible by admin access tokens. Creates a new userId (email) used to login.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String-URL",            "optional": false,            "field": "id",            "description": "<p>the user id or username (email)</p>"          },          {            "group": "Parameter",            "type": "String-URL",            "optional": false,            "field": "email",            "description": "<p>the new username (email)</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 GET request\n Body:{ \"email\": \"prov@prova.it\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200- OK": [          {            "group": "200- OK",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>the updated email field</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"name\":\"Micio\",\n  \"surname\":\"Macio\",\n  \"email\": \"prov@prova.it\"\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/",    "title": "Register a new User",    "version": "1.0.0",    "name": "Create_User",    "group": "Users",    "description": "<p>Accessible by access tokens of admin type. Creates a new User object and returns the access credentials.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "user",            "description": "<p>the user dictionary with all the fields. Email, password and type are mandatory</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"email\": \"prov@prova.it\" , \"password\":\"provami\", \"type\":\"crocierista\", \"name\":\"nome\", \"surname\":\"cognome\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - CREATED": [          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials",            "description": "<p>contains information about access credentials</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials.apiKey",            "description": "<p>contains information about apiKey</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials.refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "Created_resource",            "description": "<p>contains the created User resourcce</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_1",            "description": "<p>field 1 defined in User Schema (e.g. name)</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_2",            "description": "<p>field 2 defined in User Schema (e.g. surname)</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_N",            "description": "<p>field N defined in User Schema (e.g. type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"created_resource\":{\n           \"name\":\"Micio\",\n           \"email\":\"mario@caport.com\",\n           \"surname\":\"Macio\",\n           \"id\":\"57643332ab9293ff0b5da6f0\"\n  },\n  \"access_credentials\":{\n           \"apiKey\":{\n                   \"token\":\"VppR5sHU_hV3U\",\n                   \"expires\":1466789299072\n            },\n            \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n             }\n  }\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/users/:id",    "title": "delete User",    "version": "1.0.0",    "name": "Delete_User",    "group": "Users",    "description": "<p>Accessible by admin access tokens. Deletes User and returns the deleted resource. To call this endpoint must have an admin token.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user id</p>"          }        ]      }    },    "success": {      "fields": {        "204 - NO CONTENT": [          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "UserField_1",            "description": "<p>field 1 updated and defined in User Schema (e.g. name)</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "UserField_2",            "description": "<p>field 2 updated and defined in User Schema (e.g. surname)</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "UserField_N",            "description": "<p>field N updated and defined in User Schema (e.g. type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 204 NO CONTENT",          "content": "HTTP/1.1 204 NO CONTENT\n{\n  \"name\":\"Micio\",\n  \"surname\":\"Macio\",\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/:id/actions/disable",    "title": "disable user",    "version": "1.0.0",    "name": "DisableUser",    "group": "Users",    "description": "<p>Accessible by admin access tokens. Disables the user.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user id</p>"          }        ]      }    },    "success": {      "fields": {        "201 - Created": [          {            "group": "201 - Created",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>contains the new user status</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"status\":\"disabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/:id/actions/enable",    "title": "enable user",    "version": "1.0.0",    "name": "EnableUser",    "group": "Users",    "description": "<p>Accessible by admin access tokens. Enables the user.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>the new user status</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"status\":\"enabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/users/:id",    "title": "Get the User by id",    "version": "1.0.0",    "name": "GetUser",    "group": "Users",    "description": "<p>Accessible by admin access tokens or by the user itself. Returns the info about a User.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user id or username (email)</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "user.id",            "description": "<p>User id</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "user.field1",            "description": "<p>fiend 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "user.field2",            "description": "<p>fiend 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "user.fieldN",            "description": "<p>fiend N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n   \"id\": \"543fdd60579e1281b8f6da92\",\n   \"email\": \"prova@prova.it\",\n   \"name\": \"prova\",\n   \"surname\": \"surname\",\n   \"notes\": \"Notes About prova\"\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/users/",    "title": "Get all Users",    "version": "1.0.0",    "name": "Get_User",    "group": "Users",    "description": "<p>Accessible by admin user access tokens specified &quot;adminUser&quot; field in config.js. Returns the paginated list of all Users. Set pagination skip and limit in the URL request, e.g. &quot;get /users?skip=10&amp;limit=50&quot;</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "UserField_1",            "description": "<p>query field 2 used to set filter, e.g. name = &quot;User Name&quot;</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "UserField_2",            "description": "<p>query field 2 used to set filter, e.g. Filed2 = &quot;Field Value&quot;</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "UserField_N",            "description": "<p>query field N used to set filter, e.g. Field3 = &quot;Field Value&quot;</p>"          }        ]      }    },    "filename": "routes/users.js",    "groupTitle": "Users",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/signin",    "title": "User login",    "version": "1.0.0",    "name": "Login_User",    "group": "Users",    "description": "<p>Accessible by access tokens of type specified in &quot;SignInAuthorizedAppAndMS&quot; field in config.js. Logs in the User and returns the access credentials.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>the user email</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>the user password</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"username\": \"prov@prova.it\" , \"password\":\"provami\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials",            "description": "<p>contains information about access credentials.</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials.apiKey",            "description": "<p>contains information about apiKey</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials.refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"access_credentials\":{\n           \"apiKey\":{\n                   \"token\":\"VppR5sHU_hV3U\",\n                   \"expires\":1466789299072\n            },\n            \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n             }\n  }\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/:id/actions/resetpassword",    "title": "Reset User password",    "version": "1.0.0",    "name": "ResetPassword",    "group": "Users",    "description": "<p>Accessible by admin or AuthApp access tokens define in config.js. Creates a reset password Token.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user id or username (email)</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "reset_token",            "description": "<p>grant token to set the new password</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"reset_token\":\"ffewfh5hfdfds7678d6fsdf7d6fsdfd86d8sf6\", *\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/users/:term/actions/email/find",    "title": "Search all Users",    "version": "1.0.0",    "name": "SEARCH_User",    "group": "Users",    "description": "<p>Accessible by admin access_token. Returns the paginated list of all Users matching the search term to username.. Set pagination skip and limit, in the URL request, e.g. &quot;get /users?skip=10&amp;limit=50&quot;</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "skip",            "description": "<p>the pagination start</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "limit",            "description": "<p>the number of elements</p>"          }        ]      }    },    "filename": "routes/users.js",    "groupTitle": "Users",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/:id/actions/setpassword",    "title": "Set new User password",    "version": "1.0.0",    "name": "SetPassword",    "group": "Users",    "description": "<p>Accessible by access_token, It update user password. To call this endpoint must have a reset_token (used with authorized app or admin token) or must be the User itself.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String-URL",            "optional": false,            "field": "id",            "description": "<p>the user id or username (email)</p>"          },          {            "group": "Parameter",            "type": "String-BODY",            "optional": false,            "field": "oldpassword",            "description": "<p>the old password to update. If set, reset_token must be undefined</p>"          },          {            "group": "Parameter",            "type": "String-BODY",            "optional": false,            "field": "newpassword",            "description": "<p>the new password</p>"          },          {            "group": "Parameter",            "type": "String-BODY",            "optional": false,            "field": "reset_token",            "description": "<p>this token is used to update password. Must be undefined if oldpassword is set</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 GET request\n Body:{ \"oldpassword\": \"prova\" , \"newpassword\":\"provami\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials",            "description": "<p>contains information about access credentials.</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials.apiKey",            "description": "<p>contains information about apiKey</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "access_credentials.refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"access_credentials\":{\n           \"apiKey\":{\n                   \"token\":\"VppR5sHU_hV3U\",\n                   \"expires\":1466789299072\n            },\n            \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n             }\n  }\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/signup",    "title": "Register a new User",    "version": "1.0.0",    "name": "Sign_Up_User",    "group": "Users",    "description": "<p>Accessible by access tokens of type specified in &quot;SignUpAuthorizedAppAndMS&quot; field in config.js. Creates a new User object and returns the access credentials.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "user",            "description": "<p>the user dictionary with all the fields. Email, password and type are mandatory</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"email\": \"prov@prova.it\" , \"password\":\"provami\", \"type\":\"crocierista\", \"name\":\"nome\", \"surname\":\"cognome\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - CREATED": [          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials",            "description": "<p>contains information about access credentials</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials.apiKey",            "description": "<p>contains information about apiKey</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "access_credentials.refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "access_credentials.refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "Created_resource",            "description": "<p>contains the created User resource</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_1",            "description": "<p>field 1 defined in User Schema (e.g. name)</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_2",            "description": "<p>field 2 defined in User Schema (e.g. surname)</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "Created_resource.UserField_N",            "description": "<p>field N defined in User Schema (e.g. type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"created_resource\":{\n           \"name\":\"Micio\",\n           \"email\":\"mario@caport.com\",\n           \"surname\":\"Macio\",\n           \"id\":\"57643332ab9293ff0b5da6f0\"\n  },\n  \"access_credentials\":{\n           \"apiKey\":{\n                   \"token\":\"VppR5sHU_hV3U\",\n                   \"expires\":1466789299072\n            },\n            \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n             }\n  }\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  },  {    "type": "put",    "url": "/users/:id",    "title": "Update User",    "version": "1.0.0",    "name": "Update_User",    "group": "Users",    "description": "<p>Accessible by admin access tokens or by the user itself. Creates a new User object and returns the updated resource.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param || header]</p>"          },          {            "group": "Parameter",            "type": "String-URL",            "optional": false,            "field": "id",            "description": "<p>the user id or username (email)</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>the user dictionary with all the fields to update. Email (username) field can be updated only by admin token; for password there is a dedicated endpoint; user type cannot be updated</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 PUT request\n Body:{ \"name\":\"nome\", \"surname\":\"cognome\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_1",            "description": "<p>field 1 updated and defined in User Schema (e.g. name)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_2",            "description": "<p>field 2 updated and defined in User Schema (e.g. surname)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_N",            "description": "<p>field N updated and defined in User Schema (e.g. type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"name\":\"Micio\",\n  \"surname\":\"Macio\",\n}",          "type": "json"        }      ]    },    "filename": "routes/users.js",    "groupTitle": "Users",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "json"        }      ]    }  }]
